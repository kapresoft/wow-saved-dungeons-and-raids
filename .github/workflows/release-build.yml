# This is a basic workflow to help you get started with Actions

name: Release Build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for tags
  push:
    tags: [ "0.**", "1.**" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  addonName: SavedDungeonsAndRaids
  buildDir: $HOME/.wow-pre-release
  buildBasePathx: $HOME/.wow-pre-release/SavedDungeonsAndRaids

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Build
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      ## ------------------------------------------------ ##
      - name: Install zsh
        run: sudo apt-get update && sudo apt-get install zsh
      ## ------------------------------------------------ ##
      - name: Print zsh exists
        run: echo "$(which zsh)"
      ## ------------------------------------------------ ##
      - name: Setup environment
        # build types: branch, release
        run: |
          echo "Build Home: ${{ env.HOME }}"
          echo "Addon Name: ${{ env.addonName }}"
          echo "Build basename: ${{ env.buildBasePath }}"

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      ## ------------------------------------------------ ##
      ## Runs a single command using the runners shell ##
      - name: Setup Build Scripts
        run: |
          echo Verify zsh exists: "$(which zsh)"
          echo pwd is: "$(pwd)"
          chmod a+x ./release.sh ./package-addon.sh ./dev/md5sum.sh
          ln -s ./release.sh release-wow-addon
          echo "$(ls -l)"

      ## ------------------------------------------------ ##
      ## Runs a set of commands using the runners shell ##
      - name: Packaging the addon
        run: |
          echo "Executing: package-addon.sh"
          ./package-addon.sh
      - name: Set Artifact Variables
        run: |
          echo "buildBasePath=${{ env.buildDir }}/${{ env.addonName }}" >> $GITHUB_ENV
          echo "buildArtifact=${{ env.buildBasePath }}-${{ github.ref_name }}.zip" >> $GITHUB_ENV

      - name: List the build artifacts
        run: |
          echo "Build Artifacts: $buildDir" 
          echo "$(ls -l ${{ env.buildDir }})"
          echo "buildArtifact is $buildArtifact"
          echo "Addon Artifact Exists:"
          echo buildArtifactName="${{ env.addonName }}-${{ github.ref_name }}.zip" >> $GITHUB_ENV
          echo "Build Artifact Exists:"
          echo "$(ls -l  $buildArtifact)"
      ## ------------------------------------------------ ##
      - name: Check Vars
        run: |
          echo checksum="$(./dev/md5sum.sh $buildArtifact)" >> $GITHUB_ENV
          echo "buildArtifact is $buildArtifact"
          echo "checksum is $checksum"

      - name: Create a draft release
        id: create_draft_release
        uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          version: ${{ github.ref_name }}
          prerelease: false
          footer: |
            
            #### ${{ env.buildArtifactName }}
            ```text
            MD5 ${{ env.checksum }}
            ```
      ## ------------------------------------------------ ##
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_draft_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ env.buildArtifact }}
          asset_name: ${{ env.buildArtifactName }}
          asset_content_type: application/zip

# end